name: oidc-poc
on:
    push:
        branches:
            - '*'
jobs:
    auth:
        permissions:
            contents: read
            id-token: write
        runs-on: ubuntu-latest
        steps:
            - name: Get id token
                run: |
                    ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                    "${ACTIONS_ID_TOKEN_REQUEST_URL}" | jq .value | tr -d '"')
                    echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV
            - name: Exchange token with access
                env:
                    ID_TOKEN: ${{env.ID_TOKEN}}
                    JFROG_PLATFORM_URL: https://tsmemea.jfrog.io
                run: |
                    ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" "https://tsmemea.jfrog.io/access/api/v1/oidc/token" -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"github\"}" | jq .access_token | tr -d '"')
                    echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV


name: "API Example OIDC Integration"
on: push

# This is required as per
# https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-cloud-providers#adding-permissions-settings
permissions:
  id-token: write
jobs:
  build:
     runs-on: ubuntu-latest
     env:
      OIDC_PROVIDER: 'github'
      #OIDC_AUDIENCE: 'access-oidc-demo'
      PLATFORM_REPO: 'eks-npm'
     defaults:
      run:
        working-directory: ./package
     steps:
       - name: Checkout
         uses: actions/checkout@v3
              
       - name: Setup Node npm
         uses: actions/setup-node@v3

       - name: Get id token
         run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=access-oidc-demo" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" 
       
       - name: Exchange token with access
         env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          ARTIFACTORY_URL: ${{ vars.ARTIFACTORY_URL }}
         run: |
          ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" \
          "${ARTIFACTORY_URL}/access/api/v1/oidc/token" \
          -d "{\"provider_name\":\"github\", \
          \"subject_token\": \"${ID_TOKEN}\", \
          \"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \
          \"subject_token_type\": \"urn:ietf:params:oauth:token-type:id_token\"}" \
          | jq .access_token | tr -d '"')
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" 
          
  
       - name: Setup jfrog cli
         uses: jfrog/setup-jfrog-cli@v4
         env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}


   
     #  - name: Setup JFrog CLI
     #    uses: jfrog/setup-jfrog-cli@v3
     #    env:  
     #      JF_URL: ${{ secrets.JF_URL }}
     #    with:
     #      oidc-provider-name: ${{ env.OIDC_PROVIDER }}

       - name: Set CLI Config
         run: |
           jf npm-config --global=true --repo-resolve=$PLATFORM_REPO --repo-deploy=$PLATFORM_REPO
           echo "${{ env.ACCESS_TOKEN }}"
           docker login -udeepu19t https://psemea.jfrog.io -p${{ env.ACCESS_TOKEN }}
           
         
           
       - name: Install Dependencies
         run: jf npm install
         
           
       - name: Run tests
         run: npm test
         
       - name: Publish
         run: jf npm publish
         
       - name: Publish Build info With JFrog CLI
         run: |
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
            
            
